#!/usr/bin/env bash\n# Dotfiles installation script for macOS and Linux\n\nset -e\n\n# Update the dotfiles directory path to point to the parent of scripts/unix\nDOTFILES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )"\nOS="$(uname -s)"\n\n# Colors for better output\nRED='\033[0;31m'\nGREEN='\033[0;32m'\nYELLOW='\033[0;33m'\nBLUE='\033[0;34m'\nBOLD='\033[1m'\nNC='\033[0m' # No Color\n\n# Print with color\nprint_color() {\n  printf "${!1}${2}${NC}\n"\n}\n\n# Install chezmoi for dotfiles management\ninstall_chezmoi() {\n  print_color "BLUE" "Setting up chezmoi for dotfiles management..."\n  \n  if ! command -v chezmoi &>/dev/null; then\n    print_color "YELLOW" "Installing chezmoi..."\n    if [[ "$OS" == "Darwin" ]]; then\n      brew install chezmoi\n    else\n      # Linux installation\n      sh -c "$(curl -fsLS get.chezmoi.io)" -- -b $HOME/.local/bin\n      # Add to PATH if not already there\n      if [[ ! "$PATH" == *"$HOME/.local/bin"* ]]; then\n        export PATH="$PATH:$HOME/.local/bin"\n      fi\n    fi\n  else\n    print_color "GREEN" "chezmoi is already installed."\n  fi\n  \n  # Initialize chezmoi with the dotfiles directory\n  print_color "YELLOW" "Initializing chezmoi with your dotfiles..."\n  chezmoi init --apply --source="$DOTFILES_DIR"\n}\n\n# MACOS SPECIFIC INSTALLATION\ninstall_macos() {\n  print_color "BLUE" "Setting up macOS environment..."\n  \n  # Check for Homebrew, install if not found\n  if ! command -v brew &>/dev/null; then\n    print_color "YELLOW" "Installing Homebrew..."\n    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n    \n    # Add Homebrew to PATH\n    if [[ -f /opt/homebrew/bin/brew ]]; then\n      eval "$(/opt/homebrew/bin/brew shellenv)"\n    elif [[ -f /usr/local/bin/brew ]]; then\n      eval "$(/usr/local/bin/brew shellenv)"\n    fi\n  fi\n  \n  # Check for Xcode Command Line Tools\n  if ! xcode-select -p &>/dev/null; then\n    print_color "YELLOW" "Installing Xcode Command Line Tools..."\n    xcode-select --install\n\n    # Wait for installation to finish\n    print_color "YELLOW" "Please wait for Xcode Command Line Tools to finish installing, then press any key to continue..."\n    read -n 1\n  fi\n  \n  # Install brew packages\n  print_color "BLUE" "Installing packages with Homebrew..."\n  brew tap homebrew/cask-fonts\n  \n  # Core utilities\n  brew install \\n    neovim \\n    wget \\n    curl \\n    zsh \\n    nushell \\n    btop \\n    yazi \\n    macchina \\n    lnav \\n    wezterm \\n    ffmpeg \\n    exa \\n    bat \\n    fzf \\n    ripgrep \\n    zoxide \\n    ncdu \\n    fd \\n    ranger \\n    tldr \\n    aria2 \\n    kubectl \\n    helm \\n    terraform \\n    lazygit \\n    lazydocker \\n    python \\n    node \\n    rustup-init \\n    gnupg \\n    pinentry-mac \\n    yt-dlp \\n    miniforge \\n    chezmoi \\n    lsd \\n    dog \\n    duf \\n    dust \\n    glow \\n    httpie \\n    procs \\n    broot \\n    bottom \\n    as-tree \\n    dua-cli \\n    delta \\n    difftastic \\n    just \\n    atuin \\n    bandwhich \\n    hyperfine \\n    miniserve \\n    choose \\n    eza \\n    vivid \\n    sd \\n    xh \\n    gitui \\n    ripgrep-all \\n    bat-extras \\n    onefetch\n  # thefuck is optional; not installed by default. If needed, install manually via pip or brew.\n  \n  # Configure Miniforge to use .conda/envs directory\n  CONDA_ENV_DIR="$HOME/.conda/envs"\n  mkdir -p "$CONDA_ENV_DIR"\n  \n  # Configure conda to use the custom environments directory\n  cat > "$HOME/.condarc" <<EOL\nenvs_dirs:\n  - $CONDA_ENV_DIR\n  - $HOME/miniforge3/envs\nEOL\n  \n  # Ensure conda initialization is in shell profiles\n  for SHELL_RC in "$HOME/.bashrc" "$HOME/.zshrc"; do\n    if [ -f "$SHELL_RC" ]; then\n      if ! grep -q "conda initialize" "$SHELL_RC"; then\n        print_color "YELLOW" "Adding conda initialization to $SHELL_RC"\n        $HOME/miniforge3/bin/conda init "$(basename "$SHELL_RC" | sed 's/\.//')"\n      fi\n    fi\n  done\n  \n  print_color "GREEN" "Configured conda to store environments in $CONDA_ENV_DIR"\n  \n  # Fonts\n  brew install --cask \\n    font-fira-code-nerd-font \\n    font-meslo-lg-nerd-font\n  \n  # Developer tools\n  brew install --cask \\n    visual-studio-code \\n    github \\n    keepassxc \\n    iterm2 \\n    warp \\n    utm \\n    orbstack \\n    dbeaver-community \\n    docker\n    \n  # Desktop tools\n  brew install --cask \\n    bettertouchtool \\n    caffeine \\n    one-switch \\n    stats \\n    raycast \\n    rectangle \\n    alfred \\n    appcleaner \\n    alt-tab \\n    karabiner-elements \\n    hammerspoon \\n    iina \\n    pandan \\n    monitorcontrol \\n    drawio \\n    obsidian \\n    hiddenbar \\n    the-unarchiver \\n    qlstephen \\n    qlmarkdown \\n    quicklook-json \\n    firefox \\n    maccy \\n    amethyst \\n    shotr\n  \n  # Install slim toolkit\n  brew tap slimtoolkit/tap\n  brew install slimtoolkit\n  \n  # Jan AI\n  brew install --cask jan\n  \n  # Discord\n  brew install --cask discord\n  \n  # Teams\n  brew install --cask microsoft-teams\n  \n  # Spotify\n  brew install --cask spotify\n  \n  # Install pure-paste\n  if ! brew list pure-paste &>/dev/null; then\n    print_color "YELLOW" "Installing Pure Paste..."\n    brew install --cask pure-paste\n  fi\n  \n  # Install f.lux\n  if ! brew list flux &>/dev/null; then\n    print_color "YELLOW" "Installing f.lux..."\n    brew install --cask flux\n  fi\n  \n  # Setup Rust\n  rustup-init -y\n  \n  # Install CUDA for Nvidia GPUs if available\n  if system_profiler SPDisplaysDataType 2>/dev/null | grep -q "NVIDIA"; then\n    print_color "YELLOW" "NVIDIA GPU detected, installing CUDA..."\n    brew install cuda\n  fi\n  \n  # Setup Python development tools\n  print_color "BLUE" "Setting up Python development tools..."\n  pip3 install --user --upgrade uv ruff pyright pdoc commitizen pre-commit just\n  \n  # Setup preferences for macOS\n\n  # Karabiner-Elements - Map Caps Lock to Escape\n  mkdir -p "$HOME/.config/karabiner"\n  cat > "$HOME/.config/karabiner/karabiner.json" <<EOL\n{\n    "global": {\n        "check_for_updates_on_startup": true,\n        "show_in_menu_bar": true,\n        "show_profile_name_in_menu_bar": false\n    },\n    "profiles": [\n        {\n            "name": "Default profile",\n            "selected": true,\n            "simple_modifications": [\n                {\n                    "from": {\n                        "key_code": "caps_lock"\n                    },\n                    "to": [\n                        {\n                            "key_code": "escape"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\nEOL\n  \n  print_color "GREEN" "macOS setup completed!"\n}\n\n# DEBIAN/UBUNTU INSTALLATION\ninstall_debian() {\n  print_color "BLUE" "Setting up Debian/Ubuntu environment..."\n  \n  # Update and install essential packages\n  sudo apt-get update\n  sudo apt-get install -y \\n    apt-transport-https \\n    ca-certificates \\n    curl \\n    software-properties-common \\n    gnupg \\n    lsb-release \\n    lsd \\n    duf \\n    dust \\n    glow \\n    httpie \\n    procs \\n    broot \\n    bottom \\n    as-tree \\n    dua-cli \\n    delta \\n    difftastic \\n    just \\n    atuin \\n    bandwhich \\n    hyperfine \\n    miniserve \\n    choose \\n    eza \\n    vivid \\n    sd \\n    xh \\n    gitui \\n    ripgrep-all \\n    bat-extras \\n    onefetch\n  \n  # Add important repositories\n  \n  # VS Code\n  if ! grep -q "packages.microsoft.com/repos/code" /etc/apt/sources.list.d/vscode.list 2>/dev/null; then\n    print_color "YELLOW" "Adding VS Code repository..."\n    curl -sSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /usr/share/keyrings/microsoft-archive-keyring.gpg >/dev/null\n    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list\n  fi\n  \n  # Docker\n  if ! grep -q "download.docker.com" /etc/apt/sources.list.d/docker.list 2>/dev/null; then\n    print_color "YELLOW" "Adding Docker repository..."\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n  fi\n  \n  # Update after adding repositories\n  sudo apt-get update\n  \n  # Install packages\n  sudo apt-get install -y \\n    neovim \\n    wget \\n    curl \\n    python3-dev \\n    python3-pip \\n    python3-venv \\n    zsh \\n    fzf \\n    ripgrep \\n    fd-find \\n    htop \\n    btop \\n    tmux \\n    git \\n    docker-ce \\n    docker-ce-cli \\n    containerd.io \\n    code \\n    lnav \\n    gnupg2 \\n    texlive-full \\n    p7zip-full \\n    hashcat \\n    nmap \\n    make \\n    cmake \\n    gcc \\n    g++\n  # thefuck is optional; not installed by default. If needed, install manually via pip or apt.\n  \n  # Create symbolic links for differently named packages\n  if command -v fdfind &>/dev/null && ! command -v fd &>/dev/null; then\n    sudo ln -sf $(which fdfind) /usr/local/bin/fd\n  fi\n  \n  if command -v batcat &>/dev/null && ! command -v bat &>/dev/null; then\n    sudo ln -sf $(which batcat) /usr/local/bin/bat\n  fi\n  \n  # Setup Docker permissions\n  if [ -z "$CI" ] && command -v usermod >/dev/null 2>&1 && [ -n "$USER" ] && [ "$USER" != "root" ]; then\n    if getent group docker &>/dev/null; then\n      sudo usermod -aG docker $USER\n      print_color "YELLOW" "Added user $USER to docker group. You may need to log out and back in for this to take effect."\n    fi\n  else\n    print_color "YELLOW" "Skipping usermod: not needed in CI, not available, or running as root."\n  fi\n  \n  # Install and setup nushell\n  if ! command -v nu &>/dev/null; then\n    print_color "YELLOW" "Installing Nushell..."\n    sudo apt-get install -y libssl-dev pkg-config\n    cargo install nu\n  fi\n  \n  # Install wezterm\n  if ! command -v wezterm &>/dev/null; then\n    print_color "YELLOW" "Installing WezTerm..."\n    curl -LO https://github.com/wez/wezterm/releases/download/nightly/wezterm-nightly.Ubuntu20.04.deb\n    sudo dpkg -i wezterm-nightly.Ubuntu20.04.deb || sudo apt-get install -f -y\n    rm wezterm-nightly.Ubuntu20.04.deb\n  fi\n  \n  # Install kubectl and helm\n  if ! command -v kubectl &>/dev/null; then\n    print_color "YELLOW" "Installing kubectl..."\n    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"\n    chmod +x kubectl\n    sudo mv kubectl /usr/local/bin/\n  fi\n  \n  if ! command -v helm &>/dev/null; then\n    print_color "YELLOW" "Installing Helm..."\n    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n    chmod 700 get_helm.sh\n    ./get_helm.sh\n    rm get_helm.sh\n  fi\n  \n  # Install yazi file manager\n  if ! command -v yazi &>/dev/null; then\n    print_color "YELLOW" "Installing Yazi file manager..."\n    cargo install yazi\n  fi\n  \n  # Install macchina\n  if ! command -v macchina &>/dev/null; then\n    print_color "YELLOW" "Installing macchina..."\n    cargo install macchina\n  fi\n  \n  # Install Miniforge\n  if ! command -v conda &>/dev/null; then\n    print_color "YELLOW" "Installing Miniforge3..."\n    wget -q "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh" -O miniforge.sh\n    bash miniforge.sh -b -p $HOME/miniforge3\n    rm miniforge.sh\n    \n    # Add to PATH for current session\n    export PATH="$HOME/miniforge3/bin:$PATH"\n    \n    # Add to shell initialization\n    $HOME/miniforge3/bin/conda init bash zsh\n  fi\n  \n  # Create .conda directory structure if it doesn't exist\n  CONDA_ENV_DIR="$HOME/.conda/envs"\n  mkdir -p "$CONDA_ENV_DIR"\n  \n  # Configure conda to use the custom environments directory\n  cat > "$HOME/.condarc" <<EOL\nenvs_dirs:\n  - $CONDA_ENV_DIR\n  - $HOME/miniforge3/envs\nEOL\n  \n  # Ensure conda initialization is in shell profiles\n  for SHELL_RC in "$HOME/.bashrc" "$HOME/.zshrc"; do\n    if [ -f "$SHELL_RC" ]; then\n      if ! grep -q "conda initialize" "$SHELL_RC"; then\n        print_color "YELLOW" "Adding conda initialization to $SHELL_RC"\n        $HOME/miniforge3/bin/conda init "$(basename "$SHELL_RC" | sed 's/\.//')"\n      fi\n    fi\n  done\n  \n  print_color "GREEN" "Configured conda to store environments in $CONDA_ENV_DIR"\n  \n  # Install Python tools\n  print_color "YELLOW" "Installing Python development tools..."\n  pip3 install --user --upgrade uv ruff pyright pdoc commitizen pre-commit just\n  \n  # Install Rust\n  if ! command -v rustup &>/dev/null; then\n    print_color "YELLOW" "Installing Rust..."\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n  fi\n  \n  # Install Obsidian\n  if ! command -v obsidian &>/dev/null; then\n    print_color "YELLOW" "Installing Obsidian..."\n    wget -O obsidian.deb "https://github.com/obsidianmd/obsidian-releases/releases/download/v1.4.13/obsidian_1.4.13_amd64.deb"\n    sudo dpkg -i obsidian.deb || sudo apt-get install -f -y\n    rm obsidian.deb\n  fi\n  \n  # Install Firefox\n  if ! command -v firefox &>/dev/null; then\n    print_color "YELLOW" "Installing Firefox..."\n    sudo apt-get install -y firefox\n  fi\n  \n  # Install Discord\n  if ! command -v discord &>/dev/null; then\n    print_color "YELLOW" "Installing Discord..."\n    wget -O discord.deb "https://discord.com/api/download?platform=linux&format=deb"\n    sudo dpkg -i discord.deb || sudo apt-get install -f -y\n    rm discord.deb\n  fi\n  \n  # Install chezmoi\n  if ! command -v chezmoi &>/dev/null; then\n    print_color "YELLOW" "Installing chezmoi..."\n    sh -c "$(curl -fsLS get.chezmoi.io)" -- -b $HOME/.local/bin\n    # Add to PATH\n    export PATH="$PATH:$HOME/.local/bin"\n  fi\n\n  # dog may need snap or cargo\n  if ! command -v dog &>/dev/null; then\n    if command -v snap &>/dev/null; then\n      sudo snap install dog\n    else\n      cargo install dog\n    fi\n  fi\n\n  # Fallback to cargo if not available\n  for tool in broot bottom as-tree dua-cli delta difftastic just atuin bandwhich hyperfine miniserve choose eza vivid sd xh gitui ripgrep-all bat-extras onefetch; do\n    if ! command -v $tool &>/dev/null; then\n      cargo install $tool\n    fi\n  done\n\n  print_color "GREEN" "Debian/Ubuntu setup completed!"\n}\n\n# ALPINE LINUX INSTALLATION\ninstall_alpine() {\n  print_color "BLUE" "Setting up Alpine Linux environment..."\n\n  # Update and install essential packages\n  sudo apk update\n  sudo apk add --no-cache \\n    bash \\n    curl \\n    wget \\n    git \\n    zsh \\n    neovim \\n    python3 \\n    py3-pip \\n    py3-virtualenv \\n    fzf \\n    ripgrep \\n    fd \\n    bat \\n    htop \\n    tmux \\n    docker \\n    tree \\n    openssh \\n    sudo \\n    ncurses \\n    less \\n    unzip \\n    jq \\n    gcc \\n    musl-dev \\n    linux-headers \\n    shadow \\n    lsd \\n    duf \\n    dust \\n    glow \\n    httpie \\n    procs \\n    broot \\n    bottom \\n    as-tree \\n    dua-cli \\n    delta \\n    difftastic \\n    just \\n    atuin \\n    bandwhich \\n    hyperfine \\n    miniserve \\n    choose \\n    eza \\n    vivid \\n    sd \\n    xh \\n    gitui \\n    ripgrep-all \\n    bat-extras \\n    onefetch\n\n  # thefuck is optional; not installed by default. If needed, install manually via pip or package manager.\n  print_color "YELLOW" "Skipping installation of 'thefuck' on Alpine. If needed, install manually via pip or apk if available."\n\n  # Nerd Fonts are not in Alpine repos; must be installed manually or via custom script\n  # ttf-fira-code-nerd and ttf-meslo-nerd are unavailable on Alpine\n  print_color "YELLOW" "Nerd Fonts are not available in Alpine repositories. Please install manually if needed."\n\n  # Add user to docker group (skip in CI, if $USER is not set, or if running as root)\n  if [ -z "$CI" ] && command -v usermod >/dev/null 2>&1 && [ -n "$USER" ] && [ "$USER" != "root" ]; then\n    if getent group docker &>/dev/null; then\n      sudo usermod -aG docker $USER\n      print_color "YELLOW" "Added user $USER to docker group. You may need to log out and back in for this to take effect."\n    fi\n  else\n    print_color "YELLOW" "Skipping usermod: not needed in CI, not available, or running as root."\n  fi\n\n  # Install Python tools (PEP 668 workaround for Alpine/CI)\n  print_color "YELLOW" "Installing Python development tools (PEP 668 workaround)..."\n  if ! pip3 install --break-system-packages --user --upgrade uv ruff pyright pdoc commitizen pre-commit just; then\n    print_color "YELLOW" "pip3 install failed due to PEP 668 (externally managed environment). Skipping Python tool install. Install manually if needed."\n  fi\n  # See: https://peps.python.org/pep-0668/ and Alpine Linux Python packaging notes\n\n  # Install Rust\n  if ! command -v rustup &>/dev/null; then\n    print_color "YELLOW" "Installing Rust..."\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n  fi\n\n  # Install yazi file manager\n  if ! command -v yazi &>/dev/null; then\n    print_color "YELLOW" "Installing Yazi file manager..."\n    cargo install yazi\n  fi\n\n  # Install macchina\n  if ! command -v macchina &>/dev/null; then\n    print_color "YELLOW" "Installing macchina..."\n    cargo install macchina\n  fi\n\n  # Install chezmoi\n  if ! command -v chezmoi &>/dev/null; then\n    print_color "YELLOW" "Installing chezmoi..."\n    sh -c "$(curl -fsLS get.chezmoi.io)" -- -b $HOME/.local/bin\n    export PATH="$PATH:$HOME/.local/bin"\n  fi\n\n  # usermod is not available or needed in CI/Alpine; skip if in CI or on Alpine\n  if [ -z "$CI" ] && command -v usermod >/dev/null 2>&1; then\n    # Place any usermod logic here, only if needed and with valid arguments\n    # Example: usermod -aG docker "$USER"\n    :\n  else\n    print_color "YELLOW" "Skipping usermod: not needed in CI or not available on Alpine."\n  fi\n\n  # dog may need cargo\n  if ! command -v dog &>/dev/null; then\n    cargo install dog\n  fi\n\n  # Fallback to cargo if not available\n  for tool in broot bottom as-tree dua-cli delta difftastic just atuin bandwhich hyperfine miniserve choose eza vivid sd xh gitui ripgrep-all bat-extras onefetch; do\n    if ! command -v $tool &>/dev/null; then\n      cargo install $tool\n    fi\n  done\n\n  print_color "GREEN" "Alpine Linux setup completed!"\n}\n\n# Install Oh My Zsh if not already installed\ninstall_oh_my_zsh() {\n  if [ ! -d "$HOME/.oh-my-zsh" ]; then\n    print_color "BLUE" "Installing Oh My Zsh..."\n    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended\n  else\n    print_color "GREEN" "Oh My Zsh already installed."\n  fi\n\n  ZSH_CUSTOM=${ZSH_CUSTOM:-"$HOME/.oh-my-zsh/custom"}\n\n  # Install Powerlevel10k theme\n  if [ ! -d "$ZSH_CUSTOM/themes/powerlevel10k" ]; then\n    print_color "YELLOW" "Installing Powerlevel10k theme..."\n    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$ZSH_CUSTOM/themes/powerlevel10k"\n  else\n    print_color "GREEN" "Powerlevel10k theme already installed."\n  fi\n\n  print_color "BLUE" "Installing Oh My Zsh plugins..."\n\n  if [ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]; then\n    print_color "YELLOW" "Installing zsh-autosuggestions..."\n    git clone https://github.com/zsh-users/zsh-autosuggestions "$ZSH_CUSTOM/plugins/zsh-autosuggestions"\n  fi\n  if [ ! -d "$ZSH_CUSTOM/plugins/fast-syntax-highlighting" ]; then\n    print_color "YELLOW" "Installing fast-syntax-highlighting..."\n    git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git "$ZSH_CUSTOM/plugins/fast-syntax-highlighting"\n  fi\n  if [ ! -d "$ZSH_CUSTOM/plugins/fzf" ]; then\n    print_color "YELLOW" "Installing fzf plugin..."\n    git clone https://github.com/unixorn/fzf-zsh-plugin.git "$ZSH_CUSTOM/plugins/fzf"\n  fi\n  if [ ! -d "$ZSH_CUSTOM/plugins/history-substring-search" ]; then\n    print_color "YELLOW" "Installing history-substring-search..."\n    git clone https://github.com/zsh-users/zsh-history-substring-search.git "$ZSH_CUSTOM/plugins/history-substring-search"\n  fi\n  if [ ! -d "$ZSH_CUSTOM/plugins/zsh-interactive-cd" ]; then\n    print_color "YELLOW" "Installing zsh-interactive-cd..."\n    git clone https://github.com/changyuheng/zsh-interactive-cd.git "$ZSH_CUSTOM/plugins/zsh-interactive-cd"\n  fi\n\n  # Install autojump for fast directory navigation\n  if ! command -v autojump &>/dev/null; then\n    print_color "YELLOW" "Installing autojump..."\n    if [[ "$OS" == "Darwin" ]]; then\n      brew install autojump\n    elif command -v apk &>/dev/null; then\n      sudo apk add --no-cache autojump\n    elif command -v apt-get &>/dev/null; then\n      sudo apt-get install -y autojump\n    elif command -v pacman &>/dev/null; then\n      sudo pacman -S --noconfirm autojump\n    elif command -v dnf &>/dev/null; then\n      sudo dnf install -y autojump\n    else\n      print_color "RED" "Could not install autojump. Please install it manually."\n    fi\n  fi\n\n  # direnv integration\n  if ! command -v direnv &>/dev/null; then\n    print_color "YELLOW" "Installing direnv..."\n    if [[ "$OS" == "Darwin" ]]; then\n      brew install direnv\n    elif command -v apk &>/dev/null; then\n      sudo apk add --no-cache direnv\n    elif command -v apt-get &>/dev/null; then\n      sudo apt-get install -y direnv\n    elif command -v pacman &>/dev/null; then\n      sudo pacman -S --noconfirm direnv\n    elif command -v dnf &>/dev/null; then\n      sudo dnf install -y direnv\n    else\n      print_color "RED" "Could not install direnv. Please install it manually."\n    fi\n  fi\n\n  # Install fd and fzf for better file searching\n  if ! command -v fd &>/dev/null; then\n    print_color "YELLOW" "Installing fd..."\n    if [[ "$OS" == "Darwin" ]]; then\n      brew install fd\n    elif command -v apk &>/dev/null; then\n      sudo apk add --no-cache fd\n    elif command -v apt-get &>/dev/null; then\n      sudo apt-get install -y fd-find\n      if ! command -v fd &>/dev/null && command -v fdfind &>/dev/null; then\n        sudo ln -sf "$(which fdfind)" /usr/local/bin/fd\n      fi\n    elif command -v pacman &>/dev/null; then\n      sudo pacman -S --noconfirm fd\n    elif command -v dnf &>/dev/null; then\n      sudo dnf install -y fd-find\n    else\n      print_color "RED" "Could not install fd. Please install it manually."\n    fi\n  fi\n  if ! command -v fzf &>/dev/null; then\n    print_color "YELLOW" "Installing fzf..."\n    if [[ "$OS" == "Darwin" ]]; then\n      brew install fzf\n      $(brew --prefix)/opt/fzf/install --all --no-update-rc\n    elif command -v apk &>/dev/null; then\n      sudo apk add --no-cache fzf\n    else\n      if [ ! -d "$HOME/.fzf" ]; then\n        git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/.fzf"\n        "$HOME/.fzf/install" --all --no-update-rc\n      fi\n    fi\n  fi\n  if [ -f "$DOTFILES_DIR/config/zsh/p10k.zsh" ]; then\n    print_color "YELLOW" "Copying Powerlevel10k configuration..."\n    cp -f "$DOTFILES_DIR/config/zsh/p10k.zsh" "$HOME/.p10k.zsh"\n    print_color "GREEN" "Powerlevel10k configuration copied successfully."\n  fi\n  print_color "GREEN" "Oh My Zsh plugins setup complete."\n}\n\n# Install required fonts\ninstall_fonts() {\n  if [[ "$OS" != "Darwin" ]]; then\n    # Install Fira Code Nerd Font\n    if [ ! -d "$HOME/.local/share/fonts/FiraCode" ]; then\n      print_color "YELLOW" "Installing Fira Code Nerd Font..."\n      mkdir -p "$HOME/.local/share/fonts/FiraCode"\n      wget -q "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/FiraCode.zip" -O /tmp/firacode.zip\n      unzip -q /tmp/firacode.zip -d "$HOME/.local/share/fonts/FiraCode"\n      rm /tmp/firacode.zip\n    fi\n    \n    # Install MesloLGS NF (for Powerlevel10k)\n    if [ ! -d "$HOME/.local/share/fonts/MesloLGS" ]; then\n      print_color "YELLOW" "Installing MesloLGS NF fonts..."\n      mkdir -p "$HOME/.local/share/fonts/MesloLGS"\n      wget -q "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf" -O "$HOME/.local/share/fonts/MesloLGS/MesloLGS NF Regular.ttf"\n      wget -q "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf" -O "$HOME/.local/share/fonts/MesloLGS/MesloLGS NF Bold.ttf"\n      wget -q "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf" -O "$HOME/.local/share/fonts/MesloLGS/MesloLGS NF Italic.ttf"\n      wget -q "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf" -O "$HOME/.local/share/fonts/MesloLGS/MesloLGS NF Bold Italic.ttf"\n    fi\n    \n    # Rebuild font cache\n    fc-cache -f -v\n  fi\n}\n\n# Setup Neovim with Lazy.nvim\nsetup_neovim() {\n  print_color "BLUE" "Setting up Neovim with Lazy.nvim..."\n  \n  # Create Neovim config directories\n  mkdir -p "$HOME/.config/nvim"\n  \n  # Link Neovim configs\n  if [ -d "$DOTFILES_DIR/config/nvim" ]; then\n    find "$DOTFILES_DIR/config/nvim" -type f -exec ln -sf {} "$HOME/.config/nvim/$(basename {})" \;\n  fi\n  \n  # Initialize Lazy.nvim\n  if [[ "$OS" == "Darwin" ]]; then\n    LAZY_PATH="$HOME/.local/share/nvim/lazy/lazy.nvim"\n  else\n    LAZY_PATH="$HOME/.local/share/nvim/lazy/lazy.nvim"\n  fi\n  \n  if [ ! -d "$LAZY_PATH" ]; then\n    print_color "YELLOW" "Installing Lazy.nvim..."\n    git clone --filter=blob:none https://github.com/folke/lazy.nvim.git --branch=stable "$LAZY_PATH"\n  fi\n}\n\n# Setup Nushell configuration\nsetup_nushell() {\n  print_color "BLUE" "Setting up Nushell configuration..."\n  \n  # Create Nushell config directory\n  NUSHELL_CONFIG_DIR="$HOME/.config/nushell"\n  mkdir -p "$NUSHELL_CONFIG_DIR"\n  \n  # Link Nushell config files\n  if [ -d "$DOTFILES_DIR/config/nushell" ]; then\n    print_color "YELLOW" "Linking Nushell configuration files..."\n    ln -sf "$DOTFILES_DIR/config/nushell/config.nu" "$NUSHELL_CONFIG_DIR/config.nu"\n    ln -sf "$DOTFILES_DIR/config/nushell/env.nu" "$NUSHELL_CONFIG_DIR/env.nu"\n    \n    # Link Oh My Posh theme for Nushell to use\n    OMPOSH_DIR="$HOME/.config/powershell"\n    mkdir -p "$OMPOSH_DIR"\n    ln -sf "$DOTFILES_DIR/config/powershell/github-dark.omp.json" "$OMPOSH_DIR/github-dark.omp.json"\n    \n    print_color "GREEN" "Nushell configuration linked successfully."\n  else\n    print_color "RED" "Nushell configuration directory not found in dotfiles."\n  fi\n  \n  # Install Oh My Posh if it's not installed yet\n  if ! command -v oh-my-posh &>/dev/null; then\n    print_color "YELLOW" "Installing Oh My Posh..."\n    \n    if [[ "$OS" == "Darwin" ]]; then\n      brew install jandedobbeleer/oh-my-posh/oh-my-posh\n    else\n      # Linux installation\n      curl -s https://ohmyposh.dev/install.sh | bash -s\n    fi\n    \n    print_color "GREEN" "Oh My Posh installed successfully."\n  else\n    print_color "GREEN" "Oh My Posh is already installed."\n  fi\n}\n\n# Install VSCode extensions\ninstall_vscode_extensions() {\n  print_color "BLUE" "Installing VS Code extensions..."\n  \n  if command -v code &> /dev/null; then\n    code --install-extension adoxxorg.adoxx-adoscript\n    code --install-extension alefragnani.project-manager\n    code --install-extension batisteo.vscode-django\n    code --install-extension codezombiech.gitignore\n    code --install-extension donjayamanne.git-extension-pack\n    code --install-extension donjayamanne.githistory\n    code --install-extension donjayamanne.python-environment-manager\n    code --install-extension donjayamanne.python-extension-pack\n    code --install-extension eamodio.gitlens\n    code --install-extension github.copilot\n    code --install-extension github.copilot-chat\n    code --install-extension gruntfuggly.todo-tree\n    code --install-extension hediet.vscode-drawio\n    code --install-extension kevinrose.vsc-python-indent\n    code --install-extension mathworks.language-matlab\n    code --install-extension ms-python.debugpy\n    code --install-extension ms-python.python\n    code --install-extension ms-python.vscode-pylance\n    code --install-extension ms-toolsai.jupyter\n    code --install-extension ms-toolsai.jupyter-keymap\n    code --install-extension ms-toolsai.jupyter-renderers\n    code --install-extension ms-toolsai.tensorboard\n    code --install-extension ms-toolsai.vscode-jupyter-cell-tags\n    code --install-extension ms-toolsai.vscode-jupyter-slideshow\n    code --install-extension ms-vscode-remote.remote-wsl\n    code --install-extension njpwerner.autodocstring\n    code --install-extension visualstudioexptteam.intellicode-api-usage-examples\n    code --install-extension visualstudioexptteam.vscodeintellicode\n    code --install-extension wholroyd.jinja\n    code --install-extension ziyasal.vscode-open-in-github\n  else\n    print_color "YELLOW" "VS Code not found, skipping extension installation."\n  fi\n}\n\n# Set Zsh as default shell\nset_zsh_default() {\n  if [[ "$SHELL" != *"zsh"* ]]; then\n    print_color "YELLOW" "Setting Zsh as default shell..."\n    if command -v chsh >/dev/null 2>&1 ; then\n      chsh -s $(which zsh)\n    else\n      print_color "RED" "Could not change shell automatically. Please run: chsh -s $(which zsh)"\n    fi\n  else\n    print_color "GREEN" "Zsh is already the default shell."\n  fi\n}\n\n# Main installation function\nmain() {\n  print_color "BOLD" "====== Starting dotfiles installation ======"\n  \n  if [[ "$OS" == "Darwin" ]]; then\n    print_color "BLUE" "Detected macOS system"\n    install_macos\n  elif [[ "$OS" == "Linux" ]]; then\n    print_color "BLUE" "Detected Linux system"\n    if command -v apk &> /dev/null; then\n      print_color "YELLOW" "Alpine Linux detected"\n      install_alpine\n    elif command -v pacman &> /dev/null; then\n      if [ -f "$DOTFILES_DIR/Makefile" ];then\n        print_color "YELLOW" "Arch Linux detected, using Makefile for installation"\n        cd "$DOTFILES_DIR" && make install\n        exit 0\n      fi\n    else\n      install_debian\n    fi\n  else\n    print_color "RED" "Unsupported OS: $OS"\n    exit 1\n  fi\n  \n  install_oh_my_zsh\n  install_fonts\n  setup_neovim\n  install_vscode_extensions\n  setup_nushell\n  \n  # Use chezmoi to manage dotfiles instead of create_symlinks\n  install_chezmoi\n  \n  set_zsh_default\n  \n  print_color "GREEN" "====== Dotfiles installation complete! ======"\n  print_color "YELLOW" "Please restart your terminal or run 'source ~/.zshrc' to apply changes."\n}\n\nmain "$@"